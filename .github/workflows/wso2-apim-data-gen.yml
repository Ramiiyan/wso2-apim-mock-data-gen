name: WSO2 APIM Dummy Data Generator

on:
  workflow_dispatch:
    inputs:
      apim_version:
        description: 'WSO2 APIM Version'
        type: choice
        options:
          - '3.2.0'
          - '4.3.0'
          - '4.4.0'
          - '4.5.0'
        required: false
        default: '3.2.0'
      host:
        description: 'WSO2 APIM Host'
        required: true
        default: 'localhost'
      admin_username:
        description: 'Admin Username'
        required: true
        default: 'admin'
      admin_password:
        description: 'Admin Password'
        required: true
        default: 'admin'
      num_apps:
        description: 'Number of Test Applications'
        required: true
        default: '15'
      # mysql_root_password:
      #   description: 'MySQL Root Password'
      #   required: false
      #   default: 'root'
      # mysql_version:
      #   description: 'MySQL Version'
      #   required: false
      #   default: '5.8'
      subscription:
        description: 'WSO2 APIM Subscriber?'
        required: false
        default: false
        type: boolean  # Boolean input type
      U2_lvl:
        description: 'U2 Update Level'
        type: number
        required: false

jobs:
  build-wso2-data:
    runs-on: ubuntu-latest
    env:
      PRODUCT_PACK_NAME : wso2am-{{ github.event.inputs.apim_version }}
    
    steps:
    - uses: actions/checkout@v2

    - name: Install Common Dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y curl jq

    # Use the setup-java action to configure the Java environment
    - name: 'Set up JDK 8'
      uses: actions/setup-java@v4
      with:
        java-version: '8'
        distribution: 'temurin'
    
    - name: Get APIM Pack (if localhost)
      if: github.event.inputs.host == 'localhost'
      run: |
        # Download WSO2 API Manager
        wget https://github.com/wso2/product-apim/releases/download/v{{ github.event.inputs.apim_version }}/wso2am-{{ github.event.inputs.apim_version }}.zip
        
        # Extract the package
        unzip ${{ env.PRODUCT_PACK_NAME }}.zip
    
    - name: Get DB connector
      run: |
        # Download MYSQL Connector
        wget https://downloads.mysql.com/archives/get/p/3/file/mysql-connector-j-8.0.32.zip

         # Extract the package
        unzip mysql-connector-j-8.0.32.zip
        

    - name: update APIM pack using U2(if subscription available)
      if: ${{ github.event.inputs.subscription == 'true' }} 
      run: |
        # Update WSO2 API Manager using U2 tool (Only for subscribers)
        export WSO2_UPDATES_SKIP_CONFLICTS="true"
        echo "=========== Updating the U2 Update tool ==========="
        ./${{ env.PRODUCT_PACK_NAME }}/bin/wso2update_linux -u ${{ secrets.WSO2_USERNAME }} --password ${{ secrets.WSO2_PASSWORD }} || [[ $? -eq 2 ]]
        
        if [[ -n "${{ github.event.inputs.U2_lvl }}" ]]; then
            ./${{ env.PRODUCT_PACK_NAME }}/bin/wso2update_linux -u ${{ secrets.WSO2_USERNAME }} --password ${{ secrets.WSO2_PASSWORD }} -l ${{ github.event.inputs.U2_lvl }} || [[ $? -eq 2 ]]
        else
            ./${{ env.PRODUCT_PACK_NAME }}/bin/wso2update_linux -u ${{ secrets.WSO2_USERNAME }} --password ${{ secrets.WSO2_PASSWORD }} || [[ $? -eq 2 ]]
        fi

    - name: Setup MySQL (if localhost)
      if: github.event.inputs.host == 'localhost'
      run: |
        # Initiate MySQL
        sudo /etc/init.d/mysql start
        
        # Create WSO2 databases and user
        mysql -uroot -proot << EOF
        CREATE DATABASE IF NOT EXISTS WSO2_APIM_DB CHARACTER SET latin1;
        CREATE DATABASE IF NOT EXISTS WSO2_SHARED_DB CHARACTER SET latin1;
        CREATE USER IF NOT EXISTS 'wso2carbon'@'localhost' IDENTIFIED BY 'wso2carbon';
        GRANT ALL PRIVILEGES ON WSO2_APIM_DB.* TO 'wso2carbon'@'localhost';
        GRANT ALL PRIVILEGES ON WSO2_SHARED_DB.* TO 'wso2carbon'@'localhost';
        FLUSH PRIVILEGES;
        EOF

        # Verify MySQL Setup
        mysql -uroot -proot -e "SHOW DATABASES;"

        # Run SQL scripts
        echo "Running SQL scripts..."
        mysql -uwso2carbon -pwso2carbon WSO2_APIM_DB < ./${{ env.PRODUCT_PACK_NAME }}/dbscripts/apimgt/mysql.sql
        mysql -uwso2carbon -pwso2carbon WSO2_SHARED_DB < ./${{ env.PRODUCT_PACK_NAME }}/dbscripts/mysql.sql

        echo "SQL scripts executed successfully."

        # List tables in databases
        echo "Tables in WSO2_APIM_DB:"
        mysql -uwso2carbon -pwso2carbon -e "USE WSO2_APIM_DB; SHOW TABLES;"
        echo "Tables in WSO2_SHARED_DB:"
        mysql -uwso2carbon -pwso2carbon -e "USE WSO2_SHARED_DB; SHOW TABLES;"

        echo "Tables listed successfully."

    - name: Change the DB config (if localhost)
      if: github.event.inputs.host == 'localhost'
      run: |
        # adding the DB connector
        cp ./mysql-connector-j-8.0.32/mysql-connector-j-8.0.32.jar ./${{ env.PRODUCT_PACK_NAME }}/repository/components/lib/
        
        # Backup deployment.toml
        mv ./${{ env.PRODUCT_PACK_NAME }}/repository/conf/deployment.toml ./${{ env.PRODUCT_PACK_NAME }}/repository/conf/deployment.toml.bak
        echo "Backup created: deployment.toml.bak"

        # Update deployment.toml with repo file.
        cp ./deployment.toml ./${{ env.PRODUCT_PACK_NAME }}/repository/conf/
       
    - name: Start up the Server(if localhost)
      if: github.event.inputs.host == 'localhost'
      run: |
        # Start WSO2 API Manager in background
        ./${{ env.PRODUCT_PACK_NAME }}/bin/wso2server.sh start
        
        # Wait for server to start (typically takes a few minutes)
        echo "Waiting for WSO2 API Manager to start..."
        while ! curl -k -s -f https://localhost:9443/carbon > /dev/null; do
          sleep 60
        done
        echo "WSO2 API Manager is running"
        cd ../..

    - name: Create config.env
      run: |
        cat > config.env << EOF
        ADMIN_USERNAME="${{ github.event.inputs.admin_username }}"
        ADMIN_PASSWORD="${{ github.event.inputs.admin_password }}"
        HOST="${{ github.event.inputs.host }}"
        SERVLET_PORT="9443"
        GATEWAY_PORT="8243"
        BASIC_AUTH=\$(printf "%s" "\$ADMIN_USERNAME:\$ADMIN_PASSWORD" | base64)
        PUBLISHER_SCOPE="apim:api_create apim:api_view apim:api_publish apim:api_import_export"
        SUBSCRIBER_SCOPE="apim:subscribe apim:api_key apim:app_manage apim:sub_manage apim:store_settings apim:sub_alert_manage apim:app_import_export"
        NUM_APPS="${{ github.event.inputs.num_apps }}"
        KEY_MANAGER_ID="Resident Key Manager"
        EOF

    - name: Make scripts executable
      run: |
        chmod +x api_creator.sh
        chmod +x api_publisher.sh
        chmod +x devportal_app_creator.sh
        chmod +x app_keys_gen.sh
        chmod +x subscribe_APIs.sh

    - name: Create APIs
      run: |
        ./api_creator.sh
      continue-on-error: false

    - name: Publish APIs
      run: |
        ./api_publisher.sh
      continue-on-error: false

    - name: Create DevPortal Applications
      run: |
        ./devportal_app_creator.sh
      continue-on-error: false

    - name: Generate Application Keys
      run: |
        ./app_keys_gen.sh
      continue-on-error: false

    - name: Subscribe Applications to APIs
      run: |
        ./subscribe_APIs.sh
      continue-on-error: false

    - name: List APIs(Test Run)
      run: |
        curl -k "https://${{ github.event.inputs.host }}:9443/api/am/store/v1/apis"
      continue-on-error: true

    - name: Create and Zip MySQL Database Dumps
      run: |
        # Create a backup folder
        mkdir -p mysql_dumps
        
        # Dump each database into a separate file
        mysqldump -u root -proot WSO2_APIM_DB > mysql_dumps/WSO2_APIM_DB.sql
        mysqldump -u root -proot WSO2_SHARED_DB > mysql_dumps/WSO2_SHARED_DB.sql
    
        # Zip the dumps folder
        zip -r mysql_dumps.zip mysql_dumps

    - name: Upload MySQL Dumps as Artifact
      uses: actions/upload-artifact@v4
      with:
        name: mysql-database-dumps
        path: mysql_dumps.zip
  release:
    needs: build-wso2-data  # Ensure artifacts are built before releasing
    uses: ./.github/workflows/github-release.yml
    with:
      git_org: "Ramiiyan"
      repository: "wso2-apim-mock-data-gen"
      artifact_name: "mysql-database-dumps"
    secrets:
      GIT_ACTION_PAT: ${{ secrets.GIT_ACTION_PAT }}